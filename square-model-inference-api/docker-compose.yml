# only for dev work

version: "3.3"

services:
  traefik:
    image: traefik:v2.6.1
    container_name: traefik
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --accesslog=true
      - --accesslog.format=json
      - --accesslog.filepath=/var/log/traefik/access.log.json
      # Enable https port 443
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.le.acme.tlschallenge=true
      # Uncomment staging certs for testing
      - --certificatesresolvers.le.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.le.acme.email=sachdeva@ukp.informatik.tu-darmstadt.de
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # Enable dashboard and logging
      - --api.dashboard=true
      - --log.level=DEBUG
    ports:
      - "8989:80"  # http port
      - "8443:443"  # https port
      - "8080:8080"  # web UI port
    labels:
      - "traefik.enable=true"
      # Global redirect to https
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=https-redirect"

      # Middleware redirect from HTTP to HTTPS
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.port=8443"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # mount volume to store certificates
      - traefik-public-certificates:/certificates

  rabbit:
    hostname: rabbit
    image: rabbitmq:3.9.14-management
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      - RABBITMQ_DEFAULT_USER=ukp
    env_file:
      - management_server/.env
    volumes:
      - ./management_server/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./management_server/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json

  redishost:
    hostname: redishost
    image: redis:latest
    ports:
      - '6379:6379'
    command: ["redis-server", "/etc/redis/redis.conf"]
    env_file:
      - management_server/.env
    volumes:
      - square-redis-data:/square/redis/data:rw
      - ./management_server/redis/redis.conf:/etc/redis/redis.conf

  maintaining_worker:
#    image: ukpsquare/square-model-management:latest
    build: ./management_server
    command: celery -A tasks worker --loglevel=info
    volumes:
      - ./:/usr/src/app
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ./management_server/.env
    environment:
      - DOCKER_HOST_URL=https://172.17.0.1:8443
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - VERIFY_SSL=0
      - REDIS_USER=default
      - RABBITMQ_DEFAULT_USER=ukp
      - KEYCLOAK_BASE_URL=https://square.ukp-lab.de
      - REALM=Models-test
      - CLIENT_ID=models
    links:
      - rabbit
      - redishost
    depends_on:
      - maintaining
      - rabbit
      - redishost

  maintaining:
#    image: ukpsquare/square-model-management:latest
    command: uvicorn main:app --host 0.0.0.0 --port 9001 --log-config logging.conf
    build: ./management_server
    ports:
      - 9001:9001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    links:
      - mongo
    depends_on:
      - mongo
    env_file:
      - ./management_server/.env
    environment:
      - DOCKER_HOST_URL=https://172.17.0.1:8443
      - MODEL_API_IMAGE=ukpsquare/square-model-api-v1:latest
      - VERIFY_SSL=0
      - WEB_CONCURRENCY=1
      - ONNX_VOLUME=square-model-inference-api_onnx-models
      - KEYCLOAK_BASE_URL=https://square.ukp-lab.de
      - REALM=Models-test
      - CLIENT_ID=models
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - REDIS_USER=default
      - RABBITMQ_DEFAULT_USER=ukp
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.maintaining.rule=PathPrefix(`/api/models`)"
      - "traefik.http.routers.maintaining.entrypoints=websecure"
      - "traefik.http.routers.maintaining.tls=true"
      - "traefik.http.routers.maintaining.tls.certresolver=le"
      - "traefik.http.routers.maintaining.middlewares=maintaining-stripprefix,maintaining-addprefix"
      - "traefik.http.middlewares.maintaining-stripprefix.stripPrefixRegex.regex=/api/[a-zA-Z0-9_-]+"
      - "traefik.http.middlewares.maintaining-addprefix.addPrefix.prefix=/api"


##################################################################
# --------- Example config for transformer model server ---------#
##################################################################
  model_dpr:
#    image: ukpsquare/square-model-api-v1:latest
    build: ./inference_server
    env_file:
      - ./inference_server/.env.dpr
    environment:
      - WEB_CONCURRENCY=1
      - KEYCLOAK_BASE_URL=https://square.ukp-lab.de
    volumes:
      - ./.cache/:/etc/huggingface/.cache/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.model-dpr.rule=PathPrefix(`/api/facebook-dpr-question_encoder-single-nq-base`)"
      - "traefik.http.routers.model-dpr.entrypoints=websecure"
      - "traefik.http.routers.model-dpr.tls=true"
      - "traefik.http.routers.model-dpr.tls.certresolver=le"
      - "traefik.http.routers.model-dpr.middlewares=model-dpr-stripprefix,model-dpr-addprefix"
      - "traefik.http.middlewares.model-dpr-stripprefix.stripprefix.prefixes=/api/facebook-dpr-question_encoder-single-nq-base"
      - "traefik.http.middlewares.model-dpr-addprefix.addPrefix.prefix=/api"


  mongo:
    hostname: mongo
    image: mongo:5.0.4
    restart: always
    volumes:
      - skill-manager-mongo-data:/data/db
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_HOST: mongo
      MONGO_PORT: 27017
    env_file:
      - management_server/.env

  mongo-express:
    image: mongo-express:latest
    restart: always
    environment:
      - ME_CONFIG_MONGODB_URL=mongodb://root:example@mongo:27017
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=example
    ports:
      - 8081:8081

###########################################################
# --------- Example config for onnx model server ---------#
###########################################################
#  model_bert_onnx:
##    image: ukpsquare/square-model-api-v1:latest
#    build: ./inference_server
#    env_file:
#      - ./inference_server/.env.bert_onnx
#    environment:
#      - WEB_CONCURRENCY=1
#      - KEYCLOAK_BASE_URL=https://square.ukp-lab.de
#    volumes:
#      - ./.cache/:/etc/onnx/.cache/
#      - onnx-models:/onnx_models
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.model-bert-onnx.rule=PathPrefix(`/api/bert-onnx`)"
#      - "traefik.http.routers.model-bert-onnx.entrypoints=websecure"
#      - "traefik.http.routers.model-bert-onnx.tls=true"
#      - "traefik.http.routers.model-bert-onnx.tls.certresolver=le"
#      - "traefik.http.routers.model-bert-onnx.middlewares=model-bert-onnx-stripprefix,model-bert-onnx-addprefix"
#      - "traefik.http.middlewares.model-bert-onnx-stripprefix.stripprefix.prefixes=/api/bert-onnx"
#      - "traefik.http.middlewares.model-bert-onnx-addprefix.addPrefix.prefix=/api"

volumes:
  traefik-public-certificates:

  skill-manager-mongo-data:
    driver: local

  square-redis-data:
    driver: local

  # onnx-model folder on the vm
  onnx-models:
    driver: local
    driver_opts:
      o: bind
      type: none
#      device: /home/sterz/onnx_models
      device: /home/rachneet/onnx_models
